package Rolejam;import java.net.URL;import java.util.Date;import java.util.ResourceBundle;import javafx.fxml.FXML;import javafx.fxml.Initializable;import javafx.scene.control.Button;import javafx.scene.control.Label;import javafx.scene.control.ProgressBar;import javafx.scene.control.TextArea;import javafx.scene.control.ToggleButton;import javafx.stage.Stage;public class BattleSceneController implements Initializable {		Hero Hero = new Hero();		Enemy Enemy = new Enemy();		MainSceneController localMainSceneController;			@FXML	Label HPEnemyLabel, AttackPowerEnemyLabel, SpeedEnemyLabel, DefenceEnemyLabel;	@FXML	Label HPHeroLabel, AttackPowerHeroLabel, SpeedHeroLabel, DefenceHeroLabel;	@FXML	ToggleButton hAttackHeadTG, hAttackBodyTG, hAttackLegTG ,hDefenceHeadTG, hDefenceBodyTG, hDefenceLegTG;	@FXML	ToggleButton eAttackHeadTG, eAttackBodyTG, eAttackLegTG ,eDefenceHeadTG, eDefenceBodyTG, eDefenceLegTG;	@FXML	Button hReadyB, eReadyB;	@FXML	TextArea LogsTA;	@FXML	ProgressBar HPProgressBarHero, HPProgressBarEnemy;				boolean hAttackSelected, hDefenceSelected, 	EnemyAHeadSel, EnemyABodySel, EnemyALegSel, EnemyDHeadSel, EnemyDBodySel, EnemyDLegSel,	HeroAHeadSel, HeroABodySel, HeroALegSel, HeroDHeadSel, HeroDBodySel, HeroDLegSel,	IsHeroAlive, IsEnemyAlive;						public void EnemyDeathAction() {		HPEnemyLabel.setText(String.valueOf(0 + "/" + String.valueOf(Enemy.MaxHP)));		HPProgressBarEnemy.setProgress((0));		TextIfHeroWin("Hero", "Enemy", Enemy.CostExp);			IsEnemyAlive = false;			Hero.ExpCurrent = Hero.ExpCurrent + Enemy.CostExp;			Hero.TryTolevelUP();	}		public void SettingEnemyParam() {		if(Enemy.CurrentHP <= 0) {			EnemyDeathAction();	}		else {	    HPEnemyLabel.setText(String.valueOf(Enemy.CurrentHP) + "/" + String.valueOf(Enemy.MaxHP));	    HPProgressBarEnemy.setProgress(((double) Enemy.CurrentHP / (double) Enemy.MaxHP));		AttackPowerEnemyLabel.setText(String.valueOf(Enemy.AttackPower));		SpeedEnemyLabel.setText(String.valueOf(Enemy.AttackSpeed));		DefenceEnemyLabel.setText(String.valueOf(Enemy.Defence));			IsEnemyAlive = true;		}	}		public void SettingHeroParam() { 						if(Hero.CurrentHP <= 0) {			HPHeroLabel.setText(String.valueOf(0 + "/" + String.valueOf(Hero.MaxHP)));			HPProgressBarHero.setProgress((0));			IsHeroAlive = false;		}		else {		HPHeroLabel.setText(String.valueOf(Hero.CurrentHP) + "/" + String.valueOf(Hero.MaxHP));		HPProgressBarHero.setProgress(((double) Hero.CurrentHP / (double) Hero.MaxHP));		AttackPowerHeroLabel.setText(String.valueOf(Hero.AttackPower));		SpeedHeroLabel.setText(String.valueOf(Hero.AttackSpeed));		DefenceHeroLabel.setText(String.valueOf(Hero.Defence));					IsHeroAlive = true;		}			}		public void UpdateAllParam() {				SettingEnemyParam();		SettingHeroParam();	}			public boolean checkCanAdditionAttack() {		if((HeroAHeadSel && HeroABodySel) || (HeroAHeadSel && HeroALegSel)				|| ((HeroABodySel && HeroALegSel)) ) {			return true;		}			return false;			}		public boolean checkCanAdditionDefence() {		if((HeroDHeadSel && HeroDBodySel) || (HeroDHeadSel && HeroDLegSel)				|| ((HeroDBodySel && HeroDLegSel)) ) {		return true;		}		return false;				}		public void DisableExtraAttack() {		if(hAttackHeadTG.isSelected() == false) {			hAttackHeadTG.setDisable(true);			hAttackHeadTG.setStyle(null);		}		if(hAttackBodyTG.isSelected() == false) {			hAttackBodyTG.setDisable(true);			hAttackBodyTG.setStyle(null);		}		if(hAttackLegTG.isSelected() == false) {			hAttackLegTG.setDisable(true);			hAttackLegTG.setStyle(null);		}	}			public void DisableExtraDefence() {				if(hDefenceHeadTG.isSelected() == false) {			hDefenceHeadTG.setDisable(true);			hDefenceHeadTG.setStyle(null);		}		if(hDefenceBodyTG.isSelected() == false) {			hDefenceBodyTG.setDisable(true);			hDefenceBodyTG.setStyle(null);		}		if(hDefenceLegTG.isSelected() == false) {			hDefenceLegTG.setDisable(true);			hDefenceLegTG.setStyle(null);		}	}		public boolean hAttackSelected(ToggleButton PartOfBodyAttackTG, boolean PartOfBody, boolean PartOfBodySelectedToAttack) {		if(PartOfBodyAttackTG.isSelected() == true) {			PartOfBodyAttackTG.setStyle("-fx-border-radius: 3;-fx-border-width: 1.2 ;-fx-border-color: #FF0000;");			PartOfBodySelectedToAttack = true;			PartOfBody = true;								return PartOfBody;		}				if(PartOfBodyAttackTG.isSelected() == false) {			if(checkCanAdditionDefence() == true) {				PartOfBody = false;				DisableExtraDefence();				PartOfBodyAttackTG.setStyle(null);				return PartOfBody;			}			if(checkCanAdditionDefence() == false) {			PartOfBodyAttackTG.setStyle(null);			PartOfBody = false;			DisableExtraDefence();			return PartOfBody;			}			return PartOfBody;		}				return PartOfBody;	}			public boolean hDefenceSelected(ToggleButton PartOfBodyDefenceTG, boolean PartOfBody, boolean PartOfBodySelectedToDefence) {				if(PartOfBodyDefenceTG.isSelected() == true) {			PartOfBodyDefenceTG.setStyle("-fx-border-radius: 3;-fx-border-width: 1.2 ;-fx-border-color: #0000FF;");			PartOfBodySelectedToDefence = true;			PartOfBody = true;			return PartOfBody;					}		if(PartOfBodyDefenceTG.isSelected() == false) {			if(checkCanAdditionAttack() == true) {				PartOfBody = false;				DisableExtraAttack();				PartOfBodyDefenceTG.setStyle(null);				return PartOfBody;			}			if(checkCanAdditionAttack() == false) {			PartOfBodyDefenceTG.setStyle(null);			PartOfBody = false;			DisableExtraAttack();			return PartOfBody;			}			return PartOfBody;		}				return PartOfBody;	}						public void EnableOrDisablePartOfBody() {				if(HeroAHeadSel == true) {			hDefenceHeadTG.setDisable(true);		}				{			if(HeroAHeadSel == false) {				hDefenceHeadTG.setDisable(false);			}			}				/* ----------------------------- */		if(HeroABodySel == true) {			hDefenceBodyTG.setDisable(true);		}				{			if(HeroABodySel == false) {				hDefenceBodyTG.setDisable(false);			}			}				/* ----------------------------- */				if(HeroALegSel == true) {			hDefenceLegTG.setDisable(true);		}				{			if(HeroALegSel == false) {				hDefenceLegTG.setDisable(false);			}			}				/* ----------------------------- 		 * -----------------------------		 * -----------------------------*/						if(HeroDHeadSel == true) {			hAttackHeadTG.setDisable(true);		}				{			if(HeroDHeadSel == false) {				hAttackHeadTG.setDisable(false);			}			}				/* ----------------------------- */		if(HeroDBodySel == true) {			hAttackBodyTG.setDisable(true);		}				{			if(HeroDBodySel == false) {				hAttackBodyTG.setDisable(false);			}			}				/* ----------------------------- */				if(HeroDLegSel == true) {			hAttackLegTG.setDisable(true);		}				{			if(HeroDLegSel == false) {				hAttackLegTG.setDisable(false);			}			}	}	public void HeroDetectingAttackOrDefence() {		if(checkCanAdditionAttack() == true) {			DisableExtraAttack();		}				if(checkCanAdditionDefence() == true) {			DisableExtraDefence();		}			}	@FXML	public void HeroAttackChooseBs() {		HeroAHeadSel = hAttackSelected(hAttackHeadTG, HeroAHeadSel, hAttackSelected);		HeroABodySel = hAttackSelected(hAttackBodyTG, HeroABodySel, hAttackSelected);		HeroALegSel = hAttackSelected(hAttackLegTG, HeroALegSel, hAttackSelected);		EnableOrDisablePartOfBody();		HeroDetectingAttackOrDefence();					isHeroReady();					}	//////////////////////////////////////////////////////////////////////////////////	public void isHeroReady() {				if(hAttackSelected == true && hDefenceSelected == true) {			hReadyB.setDisable(false);		}		else {			hReadyB.setDisable(true);		}	}	///////////////////////////////////////////////////////////////////////////////////	@FXML	public void HeroDefenceChooseBs() {				HeroDHeadSel = hDefenceSelected(hDefenceHeadTG, HeroDHeadSel, hDefenceSelected);		HeroDBodySel = hDefenceSelected(hDefenceBodyTG, HeroDBodySel, hDefenceSelected);		HeroDLegSel = hDefenceSelected(hDefenceLegTG, HeroDLegSel, hDefenceSelected);		EnableOrDisablePartOfBody();		HeroDetectingAttackOrDefence();				isHeroReady();			}		@FXML	public void TheHeroIsReady() {		if(IsHeroAlive == true && IsEnemyAlive == true) {		int localEnemyAttack = Enemy.EnemyAIAttack();		int localEnemyDefence = Enemy.EnemyAIDefence();				EnemyAHeadSel = false;		EnemyABodySel = false;		EnemyALegSel = false;		EnemyDHeadSel = false;		EnemyDBodySel = false;		EnemyDLegSel = false;			if(localEnemyAttack == 1) {		EnemyAHeadSel = true;		}	if(localEnemyAttack == 2) {		EnemyABodySel = true;		}	if(localEnemyAttack == 3) {		EnemyALegSel = true;		}		if(localEnemyDefence == 1) {		EnemyDHeadSel = true;		}	if(localEnemyDefence == 2) {		EnemyDBodySel = true;		}	if(localEnemyDefence == 3) {		EnemyDLegSel = true;		}	EnemyAttackChooseBs();	EnemyDefenceChooseBs();	FightHeroVsEnemy();	FightEnemyVsHero();		UpdateAllParam();		}				else {			Stage stage = (Stage) hReadyB.getScene().getWindow();		    GetHeroInfoFromBattleScene();			stage.close();		    		}				}	public void EnemyAttackChooseBs() {		if (EnemyAHeadSel == true) {				eAttackHeadTG.setStyle("-fx-border-radius: 3;-fx-border-width: 1.2 ;-fx-border-color: #FF0000;");		}		if (EnemyAHeadSel == false) {			eAttackHeadTG.setStyle(null);		}				if (EnemyABodySel == true) {				eAttackBodyTG.setStyle("-fx-border-radius: 3;-fx-border-width: 1.2 ;-fx-border-color: #FF0000;");		}		if (EnemyABodySel == false) {				eAttackBodyTG.setStyle(null);		}				if (EnemyALegSel == true) {				eAttackLegTG.setStyle("-fx-border-radius: 3;-fx-border-width: 1.2 ;-fx-border-color: #FF0000;");		}		if (EnemyALegSel == false) {				eAttackLegTG.setStyle(null);		}	}	public void EnemyDefenceChooseBs() {		if (EnemyDHeadSel == true) {				eDefenceHeadTG.setStyle("-fx-border-radius: 3;-fx-border-width: 1.2 ;-fx-border-color: #0000FF;");		}		if (EnemyDHeadSel == false) {			eDefenceHeadTG.setStyle(null);		}				if (EnemyDBodySel == true) {				eDefenceBodyTG.setStyle("-fx-border-radius: 3;-fx-border-width: 1.2 ;-fx-border-color: #0000FF;");		}		if (EnemyDBodySel == false) {				eDefenceBodyTG.setStyle(null);		}				if (EnemyDLegSel == true) {				eDefenceLegTG.setStyle("-fx-border-radius: 3;-fx-border-width: 1.2 ;-fx-border-color: #0000FF;");		}		if (EnemyDLegSel == false) {				eDefenceLegTG.setStyle(null);		}	}		public void FightHeroVsEnemy() {				 if(HeroAHeadSel == true) {			if(EnemyDHeadSel == false) {				Enemy.CurrentHP = Enemy.CurrentHP - (Hero.AttackPower - Enemy.Defence);				TextIfDamaged("Hero", "Enemy", "Head", String.valueOf(Hero.AttackPower - Enemy.Defence));			}			if(EnemyDHeadSel == true) {				TextIfBlocked("Hero", "Enemy", "Head");			}					}		if(HeroABodySel == true) {			if(EnemyDBodySel == false) {				Enemy.CurrentHP = Enemy.CurrentHP - (Hero.AttackPower - Enemy.Defence);				TextIfDamaged("Hero", "Enemy", "Body", String.valueOf(Hero.AttackPower - Enemy.Defence));			}			if(EnemyDBodySel == true) {				TextIfBlocked("Hero", "Enemy", "Body");			}		}		if(HeroALegSel == true) {			if(EnemyDLegSel == false) {				Enemy.CurrentHP = Enemy.CurrentHP - (Hero.AttackPower - Enemy.Defence);				TextIfDamaged("Hero", "Enemy", "Leg", String.valueOf(Hero.AttackPower - Enemy.Defence));			}			if(EnemyDLegSel == true) {				TextIfBlocked("Hero", "Enemy", "Leg");			}		}			}		public void FightEnemyVsHero() {				 if(EnemyAHeadSel == true) {			if(HeroDHeadSel == false) {				Hero.CurrentHP = Hero.CurrentHP - (Enemy.AttackPower - Hero.Defence);				TextIfDamaged("Enemy", "Hero", "Head", String.valueOf(Enemy.AttackPower - Hero.Defence));			}			if(HeroDHeadSel == true) {				TextIfBlocked("Enemy", "Hero", "Head");			}					}		if(EnemyABodySel == true) {			if(HeroDBodySel == false) {				Hero.CurrentHP = Hero.CurrentHP - (Enemy.AttackPower - Hero.Defence);				TextIfDamaged("Enemy", "Hero", "Body", String.valueOf(Enemy.AttackPower - Hero.Defence));			}			if(HeroDBodySel == true) {				TextIfBlocked("Enemy", "Hero", "Body");				}		}		if(EnemyALegSel == true) {			if(HeroDLegSel == false) {				Hero.CurrentHP = Hero.CurrentHP - (Enemy.AttackPower - Hero.Defence);				TextIfDamaged("Enemy", "Hero", "Leg", String.valueOf(Enemy.AttackPower - Hero.Defence));			}			if(HeroDLegSel == true) {				TextIfBlocked("Enemy", "Hero", "Leg");			}		}			}		public void AddNextTextToLog(String localInfo) {		LogsTA.appendText("\n");		LogsTA.appendText(new Date().toString() + ": " + localInfo);	}		public void TextIfBlocked(String Who, String toWhom, String Where) {		AddNextTextToLog(Who + " Attack " + toWhom + " in " + Where + ", but attack is blocked!");	}	public void TextIfDamaged(String Who, String toWhom, String Where,String howMuchDamage) {		AddNextTextToLog(Who + " Attack " + toWhom + " in " + Where + ", and deal to " + toWhom + " " + howMuchDamage + " damage.");	}		public void TextIfHeroWin(String Who, String versusWho, int HowMuchExpGained) {		AddNextTextToLog("The " + Who + " and win the battle, " + Who + " gain " + HowMuchExpGained + " Exp.");	}		@Override	public void initialize(URL arg0, ResourceBundle arg1) {		// TODO Auto-generated method stub			}		public void GetHeroInfoFromBattleScene() {		localMainSceneController.SetHeroInfoFromBattleScene(Hero);		localMainSceneController.UpdateHeroStat();	}		public void SetMainController(MainSceneController localMainSceneController) {		this.localMainSceneController = localMainSceneController;			}																	}